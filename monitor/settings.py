"""
Django settings for monitor project.

Generated by 'django-admin startproject' using Django 3.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os, time
import logging

from pathlib import Path

from . yamls  import fetchConfig

BASE_DIR = Path(__file__).resolve(strict=True).parent.parent

CONFIG = fetchConfig("microscope")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '=5vx%46qw@d+4741h*d1lrpz(rfa3!o^100e@sgueg&bti-@!@'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ["*"]


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'django_apscheduler',
    'django_celery_beat',
    'updata',
    'workcondition',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'monitor.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'monitor.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
     'default': {
         'ENGINE': 'django.db.backends.mysql',
         'HOST': CONFIG['mysql']['host'],    
         'PORT': CONFIG['mysql']['port'],                
         'USER': CONFIG['mysql']['user'],               
         'PASSWORD': CONFIG['mysql']['passwd'],        
         'NAME': CONFIG['mysql']['name'],
         "charset": CONFIG['mysql']['charset']
     }
 }

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'
TIME_ZONE = 'Asia/Shanghai'
USE_I18N = True
USE_L10N = True
USE_TZ = False
DJANGO_CELERY_BEAT_TZ_AWARE = False
CELERY_BROKER_URL = os.environ.get("CELERY_BROKER", "amqp://{0}:{1}@{2}:{3}/".format(
                                       CONFIG['rabbitmq']['user'],
                                       CONFIG['rabbitmq']['passwd'],
                                       CONFIG['rabbitmq']['host'],
                                       CONFIG['rabbitmq']['port']
                                      )
                                  )    
CELERY_RESULT_BACKEND = os.environ.get("CELERY_BROKER", "redis://{0}:{1}@{2}:{3}/0".format(
                                          CONFIG['redis']['user'],
                                          CONFIG['redis']['passwd'],
                                          CONFIG['redis']['host'],
                                          CONFIG['redis']['port']
                                         )
                                      )    
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = '/static/'
STATICFILES_FINDERS = (
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder"
)

# 配置日志
cur_path = os.path.dirname(os.path.realpath(__file__)) 
log_path = os.path.join(os.path.dirname(cur_path), 'logs')
if not os.path.exists(log_path): os.mkdir(log_path) 

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'standard': {
            'format': '[%(asctime)s] [%(filename)s:%(lineno)d] [%(module)s:%(funcName)s] '
                      '[%(levelname)s]- %(message)s'},
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'filters': {
    },
    'handlers': {
        'default': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            # 'filename': os.path.join(log_path, 'all-{}.log'.format(time.strftime('%Y-%m-%d'))),
            'filename': os.path.join(log_path, 'all.log'),
            'maxBytes': 1024 * 1024 * 10,
            'backupCount': 3,
            'formatter': 'standard', 
            'encoding': 'utf-8', 
        },
        'error': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(log_path, 'error.log'),
            'maxBytes': 1024 * 1024 * 3, 
            'backupCount': 3, 
            'formatter': 'standard', 
            'encoding': 'utf-8',  
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'standard'
        },
        'info': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(log_path, 'info.log'),
            'maxBytes': 1024 * 1024 * 3,
            'backupCount': 3,
            'formatter': 'standard',
            'encoding': 'utf-8', 
        },
        'instruction': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(log_path, 'instruction.log'),
            'maxBytes': 1024 * 1024 * 10,
            'backupCount': 3,
            'formatter': 'standard',
            'encoding': 'utf-8',  
        },
        'workcondition': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(log_path, 'workcondition.log'),
            'maxBytes': 1024 * 1024 * 10,
            'backupCount': 3,
            'formatter': 'standard',
            'encoding': 'utf-8',  
        },
    },
    'loggers': {
        'django': {
            'handlers': ['default', 'console'],
            'level': 'INFO',
            'propagate': False
        },
        'log': {
            'handlers': ['error', 'info', 'console', 'default'],
            'level': 'INFO',
            'propagate': True
        },
        "instruction": {
            'handlers': ['instruction'],
            'level': 'INFO',
            'propagate': True            
        },
        "workcondition": {
            'handlers': ['workcondition'],
            'level': 'INFO',
            'propagate': True            
        }
    }
}